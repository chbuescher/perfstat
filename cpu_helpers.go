package perfstat

/*
#cgo LDFLAGS: -lperfstat

#include <libperfstat.h>
#include <sys/proc.h>
*/
import "C"

func perfstatcpu2cpu(n *C.perfstat_cpu_t) CPU {
	var c CPU
	c.Name = C.GoString(&n.name[0])
	c.User = int64(n.user)
	c.Sys = int64(n.sys)
	c.Idle = int64(n.idle)
	c.Wait = int64(n.wait)
	c.PSwitch = int64(n.pswitch)
	c.Syscall = int64(n.syscall)
	c.Sysread = int64(n.sysread)
	c.Syswrite = int64(n.syswrite)
	c.Sysfork = int64(n.sysfork)
	c.Sysexec = int64(n.sysexec)
	c.Readch = int64(n.readch)
	c.Writech = int64(n.writech)
	c.Bread = int64(n.bread)
	c.Bwrite = int64(n.bwrite)
	c.Lread = int64(n.lread)
	c.Lwrite = int64(n.lwrite)
	c.Phread = int64(n.phread)
	c.Phwrite = int64(n.phwrite)
	c.Iget = int64(n.iget)
	c.Namei = int64(n.namei)
	c.Dirblk = int64(n.dirblk)
	c.Msg = int64(n.msg)
	c.Sema = int64(n.sema)
	c.MinFaults = int64(n.minfaults)
	c.MajFaults = int64(n.majfaults)
	c.PUser = int64(n.puser)
	c.PSys = int64(n.psys)
	c.PIdle = int64(n.pidle)
	c.PWait = int64(n.pwait)
	c.RedispSD0 = int64(n.redisp_sd0)
	c.RedispSD1 = int64(n.redisp_sd1)
	c.RedispSD2 = int64(n.redisp_sd2)
	c.RedispSD3 = int64(n.redisp_sd3)
	c.RedispSD4 = int64(n.redisp_sd4)
	c.RedispSD5 = int64(n.redisp_sd5)
	c.MigrationPush = int64(n.migration_push)
	c.MigrationS3grq = int64(n.migration_S3grq)
	c.MigrationS3pul = int64(n.migration_S3pul)
	c.InvolCSwitch = int64(n.invol_cswitch)
	c.VolCSwitch = int64(n.vol_cswitch)
	c.RunQueue = int64(n.runque)
	c.Bound = int64(n.bound)
	c.DecrIntrs = int64(n.decrintrs)
	c.MpcRIntrs = int64(n.mpcrintrs)
	c.MpcSIntrs = int64(n.mpcsintrs)
	c.SoftIntrs = int64(n.softintrs)
	c.DevIntrs = int64(n.devintrs)
	c.PhantIntrs = int64(n.phantintrs)
	c.IdleDonatedPurr = int64(n.idle_donated_purr)
	c.IdleDonatedSpurr = int64(n.idle_donated_spurr)
	c.BusyDonatedPurr = int64(n.busy_donated_purr)
	c.BusyDonatedSpurr = int64(n.busy_donated_spurr)
	c.IdleStolenPurr = int64(n.idle_stolen_purr)
	c.IdleStolenSpurr = int64(n.idle_stolen_spurr)
	c.BusyStolenPurr = int64(n.busy_stolen_purr)
	c.BusyStolenSpurr = int64(n.busy_stolen_spurr)
	c.Hpi = int64(n.hpi)
	c.Hpit = int64(n.hpit)
	c.PUserSpurr = int64(n.puser_spurr)
	c.PSysSpurr = int64(n.psys_spurr)
	c.PIdleSpurr = int64(n.pidle_spurr)
	c.PWaitSpurr = int64(n.pwait_spurr)
	c.SpurrFlag = int32(n.spurrflag)
	c.LocalDispatch = int64(n.localdispatch)
	c.NearDispatch = int64(n.neardispatch)
	c.FarDispatch = int64(n.fardispatch)
	c.CSwitches = int64(n.cswitches)
	c.Version = int64(n.version)
	c.TbLast = int64(n.tb_last)
	c.State = int(n.state)
	c.VtbLast = int64(n.vtb_last)
	c.ICountLast = int64(n.icount_last)
	return c
}

func perfstatcputotal2cputotal(n *C.perfstat_cpu_total_t) CPUTotal {
	var c CPUTotal
	c.NCpus = int(n.ncpus)
	c.NCpusCfg = int(n.ncpus_cfg)
	c.Description = C.GoString(&n.description[0])
	c.ProcessorHz = int64(n.processorHZ)
	c.User = int64(n.user)
	c.Sys = int64(n.sys)
	c.Idle = int64(n.idle)
	c.Wait = int64(n.wait)
	c.PSwitch = int64(n.pswitch)
	c.Syscall = int64(n.syscall)
	c.Sysread = int64(n.sysread)
	c.Syswrite = int64(n.syswrite)
	c.Sysfork = int64(n.sysfork)
	c.Sysexec = int64(n.sysexec)
	c.Readch = int64(n.readch)
	c.Writech = int64(n.writech)
	c.DevIntrs = int64(n.devintrs)
	c.SoftIntrs = int64(n.softintrs)
	c.Lbolt = int64(n.lbolt)
	c.LoadAvg1 = (float32(n.loadavg[0]) / (1 << C.SBITS))
	c.LoadAvg5 = (float32(n.loadavg[1]) / (1 << C.SBITS))
	c.LoadAvg15 = (float32(n.loadavg[2]) / (1 << C.SBITS))
	c.RunQueue = int64(n.runque)
	c.SwpQueue = int64(n.swpque)
	c.Bread = int64(n.bread)
	c.Bwrite = int64(n.bwrite)
	c.Lread = int64(n.lread)
	c.Lwrite = int64(n.lwrite)
	c.Phread = int64(n.phread)
	c.Phwrite = int64(n.phwrite)
	c.RunOcc = int64(n.runocc)
	c.SwpOcc = int64(n.swpocc)
	c.Iget = int64(n.iget)
	c.Namei = int64(n.namei)
	c.Dirblk = int64(n.dirblk)
	c.Msg = int64(n.msg)
	c.Sema = int64(n.sema)
	c.RcvInt = int64(n.rcvint)
	c.XmtInt = int64(n.xmtint)
	c.MdmInt = int64(n.mdmint)
	c.TtyRawInch = int64(n.tty_rawinch)
	c.TtyCanInch = int64(n.tty_caninch)
	c.TtyRawOutch = int64(n.tty_rawoutch)
	c.Ksched = int64(n.ksched)
	c.Koverf = int64(n.koverf)
	c.Kexit = int64(n.kexit)
	c.Rbread = int64(n.rbread)
	c.Rcread = int64(n.rcread)
	c.Rbwrt = int64(n.rbwrt)
	c.Rcwrt = int64(n.rcwrt)
	c.Traps = int64(n.traps)
	c.NCpusHigh = int64(n.ncpus_high)
	c.PUser = int64(n.puser)
	c.PSys = int64(n.psys)
	c.PIdle = int64(n.pidle)
	c.PWait = int64(n.pwait)
	c.DecrIntrs = int64(n.decrintrs)
	c.MpcRIntrs = int64(n.mpcrintrs)
	c.MpcSIntrs = int64(n.mpcsintrs)
	c.PhantIntrs = int64(n.phantintrs)
	c.IdleDonatedPurr = int64(n.idle_donated_purr)
	c.IdleDonatedSpurr = int64(n.idle_donated_spurr)
	c.BusyDonatedPurr = int64(n.busy_donated_purr)
	c.BusyDonatedSpurr = int64(n.busy_donated_spurr)
	c.IdleStolenPurr = int64(n.idle_stolen_purr)
	c.IdleStolenSpurr = int64(n.idle_stolen_spurr)
	c.BusyStolenPurr = int64(n.busy_stolen_purr)
	c.BusyStolenSpurr = int64(n.busy_stolen_spurr)
	c.IOWait = int32(n.iowait)
	c.PhysIO = int32(n.physio)
	c.TWait = int64(n.twait)
	c.Hpi = int64(n.hpi)
	c.Hpit = int64(n.hpit)
	c.PUserSpurr = int64(n.puser_spurr)
	c.PSysSpurr = int64(n.psys_spurr)
	c.PIdleSpurr = int64(n.pidle_spurr)
	c.PWaitSpurr = int64(n.pwait_spurr)
	c.SpurrFlag = int(n.spurrflag)
	c.Version = int64(n.version)
	c.TbLast = int64(n.tb_last)
	c.PurrCoalescing = int64(n.purr_coalescing)
	c.SpurrCoalescing = int64(n.spurr_coalescing)
	return c
}

func perfstatcpuutil2cpuutil(n *C.perfstat_cpu_util_t) CPUUtil {
	var c CPUUtil

	c.Version = int64(n.version)
	c.CpuID = C.GoString(&n.cpu_id[0])
	c.Entitlement = float32(n.entitlement)
	c.UserPct = float32(n.user_pct)
	c.KernPct = float32(n.kern_pct)
	c.IdlePct = float32(n.idle_pct)
	c.WaitPct = float32(n.wait_pct)
	c.PhysicalBusy = float32(n.physical_busy)
	c.PhysicalConsumed = float32(n.physical_consumed)
	c.FreqPct = float32(n.freq_pct)
	c.EntitlementPct = float32(n.entitlement_pct)
	c.BusyPct = float32(n.busy_pct)
	c.IdleDonatedPct = float32(n.idle_donated_pct)
	c.BusyDonatedPct = float32(n.busy_donated_pct)
	c.IdleStolenPct = float32(n.idle_stolen_pct)
	c.BusyStolenPct = float32(n.busy_stolen_pct)
	c.LUserPct = float32(n.l_user_pct)
	c.LKernPct = float32(n.l_kern_pct)
	c.LIdlePct = float32(n.l_idle_pct)
	c.LWaitPct = float32(n.l_wait_pct)
	c.DeltaTime = int64(n.delta_time)

	return c
}

